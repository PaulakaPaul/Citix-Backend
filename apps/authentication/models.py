from django.contrib.auth.models import AbstractUser
from django.contrib.auth.validators import UnicodeUsernameValidator
from django.db import models
from django.contrib.postgres.fields import ArrayField
from apps.authentication.user import _constants
from rest_framework.authtoken.models import Token
from django.utils.translation import gettext_lazy as _

username_validator = UnicodeUsernameValidator()
SIZE = _constants.QUERY_STRINGS_LENGTH_ADDR


class CloudGeneratedToken(Token):

    def generate_key(self):
        # The key will be generated by the cloud and persisted on signup/login.
        return self.user.auth_token.key


class User(AbstractUser):
    email = models.EmailField(_('email address'), unique=True)
    phone = models.CharField(_('phone_number'), max_length=255, blank=True, null=True)

    username = models.CharField(
        _('username'),
        max_length=150,
        help_text=_('Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.'),
        validators=[username_validator],
        blank=True,
        null=True
    )

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = []

    def __str__(self):
        return self.email


class UserAddress(models.Model):
    country = models.CharField(_('country name'), max_length=SIZE, blank=False, validators=[username_validator])
    city = models.CharField(_('city name'), max_length=SIZE, blank=False, validators=[username_validator])
    neighbourhood = models.CharField(_('neighbourhood name'), max_length=SIZE, blank=False, validators=[username_validator])
    street = models.CharField(_('street address'), max_length=SIZE, blank=True)
    number = models.CharField(_('number address'), max_length=SIZE, blank=True)
    user = models.ForeignKey(User, on_delete=True)

    def get_full_address(self):
        full_name = '%s %s %s %s ' % (self.country, self.city, self.neighbourhood, self.street)
        return full_name.strip()

    def get_city(self):
        return self.city

    def get_user(self):
        return self.user


class UserRating(models.Model):
    starRating = models.IntegerField(_('star_rating'), blank=False)
    user = models.ForeignKey(User, on_delete=True)

    def get_rating(self):
        return self.starRating


class Location(models.Model):
    x = models.IntegerField()
    y = models.IntegerField()


class Event(models.Model):
    name = models.CharField(_('name'), max_length=SIZE, blank=False, validators=[username_validator])
    description = models.CharField(_('description'), max_length=SIZE*10, blank=False, validators=[username_validator])
    location = models.ForeignKey(Location, on_delete=True)
    photo_urls = ArrayField(ArrayField(models.CharField(max_length=SIZE*100)))


class BaseUserEvent(models.Model):
    event = models.ForeignKey(Event, on_delete=True)
    user = models.ForeignKey(User, on_delete=True)


